# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'c49e54a5-680b-403c-851a-8c27d6537eac'
  # Function app name
  functionAppName: 'DeviceReg'
  # Agent VM image name
  vmImageName: 'windows-2019'
  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: DotNetCoreCLI@2
#       displayName: Build
#       inputs:
#         command: 'build'
#         projects: |
#           $(workingDirectory)/*.csproj
#         arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release
#     - task: ArchiveFiles@2
#       displayName: 'Archive files'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
#         includeRootFolder: false
#         archiveType: zip
#         archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#         replaceExistingArchive: true

#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#       artifact: drop

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: 'development'
#     pool:
#       vmImage: $(vmImageName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureFunctionApp@1
#             displayName: 'Azure functions app deploy'
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: functionApp
#               appName: $(functionAppName)
#               package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
- stage: Test
  displayName: Test stage
  # dependsOn: Deploy
  jobs:
  - job: Test
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.x'
    - script: | 
        pip install -r Test/requirements.txt
        pip install pytest-cov
      displayName: 'Install dependency'

    - script: |
        cd Test
        pytest -s --junitxml=$(Build.StagingDirectory)/result.xml --host devicereg.azurewebsites.net
        ls
      displayName: 'Run tests'

    - task: PublishTestResults@2
      displayName: 'Publish test result /010.xml'
      inputs:
        testResultsFiles: '$(Build.StagingDirectory)/result.xml'
        testRunTitle: 010