# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

variables:
  - group: 'AzureDevOps'
  - name: azureSubscription
    value: 'c49e54a5-680b-403c-851a-8c27d6537eac'
  - name: functionAppName
    value: 'DeviceReg'
  - name: vmImageName
    value: 'windows-2019'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Create
  displayName: Create Stage
  jobs:
  - job: CreateServer
    displayName: Create SQL Server
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@1
      displayName: Create SQL Server
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: 'inlineScript'
        inlinescript: 'az sql server create -l $(location) -g $(resourceGroupName) -n $(azureSqlServerResourceName) -u $(sqlUser) -p $(sqlPassword)'
    - task: AzureCLI@1
      displayName: Allow Public Access
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: 'inlineScript'
        inlinescript: 'az sql server firewall-rule create -g $(resourceGroupName) -s $(azureSqlServerResourceName) -n allow-public-access --start-ip-address $(start-ip-address) --end-ip-address $(end-ip-address)'

  - job: CreateDatabase
    displayName: Create SQL Database
    dependsOn: CreateServer
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@1
      displayName: Create SQL Database
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: 'inlineScript'
        inlinescript: 'az sql db create -g $(resourceGroupName) -s $(azureSqlServerResourceName) -n $(azureSqlDBName) --service-objective basic'

- stage: DeployDatabase
  displayName: Deploy Stage
  depends: Create
  jobs:
  - job: DeployDACPAC
    displayName: Deploy Database
    pool:
      vmImage: $(vmImageName)
    steps:  
    - task: SqlAzureDacpacDeployment@1
      inputs:
        azureSubscription: 'Azure subscription 1 (4f69f38a-2319-4294-9232-c0991c0c917d)'
        AuthenticationType: 'server'
        ServerName: '$(azureSqlServerResourceName).database.windows.net'
        DatabaseName: $(azureSqlDBName)
        SqlUsername: $(sqlUser)
        SqlPassword: $(sqlPassword)
        deployType: 'SqlTask'
        SqlFile: $(SqlFile)
        IpDetectionMethod: 'AutoDetect'

- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build Dotnet App
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy Dotnet App
    environment: 'development'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

- stage: Test
  displayName: Test stage
  dependsOn: Deploy
  jobs:
  - job: Test
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.x'
    - script: | 
        pip install -r Test/requirements.txt
        pip install pytest-cov
      displayName: 'Install dependency'
    - script: |
        cd Test
        pytest -s --junitxml=$(Build.StagingDirectory)/result.xml --host devicereg.azurewebsites.net --server $(azureSqlServerResourceName).database.windows.net --database $(azureSqlDBName) --username $(sqlUser) --password $(sqlPassword)
        ls
      displayName: 'Run tests'
    - task: PublishTestResults@2
      displayName: 'Publish test result /result.xml'
      inputs:
        testResultsFiles: '$(Build.StagingDirectory)/result.xml'
        testRunTitle: DeviceReg Test Result